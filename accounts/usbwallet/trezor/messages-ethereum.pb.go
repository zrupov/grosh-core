// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-grosh.proto

package trezor

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Request: Ask device for public key corresponding to address_n path
// @start
// @next GroshPublicKey
// @next Failure
type GroshGetPublicKey struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshGetPublicKey) Reset()         { *m = GroshGetPublicKey{} }
func (m *GroshGetPublicKey) String() string { return proto.CompactTextString(m) }
func (*GroshGetPublicKey) ProtoMessage()    {}
func (*GroshGetPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{0}
}

func (m *GroshGetPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshGetPublicKey.Unmarshal(m, b)
}
func (m *GroshGetPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshGetPublicKey.Marshal(b, m, deterministic)
}
func (m *GroshGetPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshGetPublicKey.Merge(m, src)
}
func (m *GroshGetPublicKey) XXX_Size() int {
	return xxx_messageInfo_GroshGetPublicKey.Size(m)
}
func (m *GroshGetPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshGetPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_GroshGetPublicKey proto.InternalMessageInfo

func (m *GroshGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GroshGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains public key derived from device private seed
// @end
type GroshPublicKey struct {
	Node                 *HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub                 *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GroshPublicKey) Reset()         { *m = GroshPublicKey{} }
func (m *GroshPublicKey) String() string { return proto.CompactTextString(m) }
func (*GroshPublicKey) ProtoMessage()    {}
func (*GroshPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{1}
}

func (m *GroshPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshPublicKey.Unmarshal(m, b)
}
func (m *GroshPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshPublicKey.Marshal(b, m, deterministic)
}
func (m *GroshPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshPublicKey.Merge(m, src)
}
func (m *GroshPublicKey) XXX_Size() int {
	return xxx_messageInfo_GroshPublicKey.Size(m)
}
func (m *GroshPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_GroshPublicKey proto.InternalMessageInfo

func (m *GroshPublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GroshPublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

//*
// Request: Ask device for Grosh address corresponding to address_n path
// @start
// @next GroshAddress
// @next Failure
type GroshGetAddress struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshGetAddress) Reset()         { *m = GroshGetAddress{} }
func (m *GroshGetAddress) String() string { return proto.CompactTextString(m) }
func (*GroshGetAddress) ProtoMessage()    {}
func (*GroshGetAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{2}
}

func (m *GroshGetAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshGetAddress.Unmarshal(m, b)
}
func (m *GroshGetAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshGetAddress.Marshal(b, m, deterministic)
}
func (m *GroshGetAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshGetAddress.Merge(m, src)
}
func (m *GroshGetAddress) XXX_Size() int {
	return xxx_messageInfo_GroshGetAddress.Size(m)
}
func (m *GroshGetAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshGetAddress.DiscardUnknown(m)
}

var xxx_messageInfo_GroshGetAddress proto.InternalMessageInfo

func (m *GroshGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GroshGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains an Grosh address derived from device private seed
// @end
type GroshAddress struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	AddressHex           *string  `protobuf:"bytes,2,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshAddress) Reset()         { *m = GroshAddress{} }
func (m *GroshAddress) String() string { return proto.CompactTextString(m) }
func (*GroshAddress) ProtoMessage()    {}
func (*GroshAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{3}
}

func (m *GroshAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshAddress.Unmarshal(m, b)
}
func (m *GroshAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshAddress.Marshal(b, m, deterministic)
}
func (m *GroshAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshAddress.Merge(m, src)
}
func (m *GroshAddress) XXX_Size() int {
	return xxx_messageInfo_GroshAddress.Size(m)
}
func (m *GroshAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshAddress.DiscardUnknown(m)
}

var xxx_messageInfo_GroshAddress proto.InternalMessageInfo

func (m *GroshAddress) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GroshAddress) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next GroshTxRequest
// @next Failure
type GroshSignTx struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	ToBin                []byte   `protobuf:"bytes,5,opt,name=toBin" json:"toBin,omitempty"`
	ToHex                *string  `protobuf:"bytes,11,opt,name=toHex" json:"toHex,omitempty"`
	Value                []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk     []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength           *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId              *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType               *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshSignTx) Reset()         { *m = GroshSignTx{} }
func (m *GroshSignTx) String() string { return proto.CompactTextString(m) }
func (*GroshSignTx) ProtoMessage()    {}
func (*GroshSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{4}
}

func (m *GroshSignTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshSignTx.Unmarshal(m, b)
}
func (m *GroshSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshSignTx.Marshal(b, m, deterministic)
}
func (m *GroshSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshSignTx.Merge(m, src)
}
func (m *GroshSignTx) XXX_Size() int {
	return xxx_messageInfo_GroshSignTx.Size(m)
}
func (m *GroshSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_GroshSignTx proto.InternalMessageInfo

func (m *GroshSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GroshSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *GroshSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *GroshSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *GroshSignTx) GetToBin() []byte {
	if m != nil {
		return m.ToBin
	}
	return nil
}

func (m *GroshSignTx) GetToHex() string {
	if m != nil && m.ToHex != nil {
		return *m.ToHex
	}
	return ""
}

func (m *GroshSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GroshSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *GroshSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *GroshSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *GroshSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

//*
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next GroshTxAck
type GroshTxRequest struct {
	DataLength           *uint32  `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV           *uint32  `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR           []byte   `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS           []byte   `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshTxRequest) Reset()         { *m = GroshTxRequest{} }
func (m *GroshTxRequest) String() string { return proto.CompactTextString(m) }
func (*GroshTxRequest) ProtoMessage()    {}
func (*GroshTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{5}
}

func (m *GroshTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshTxRequest.Unmarshal(m, b)
}
func (m *GroshTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshTxRequest.Marshal(b, m, deterministic)
}
func (m *GroshTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshTxRequest.Merge(m, src)
}
func (m *GroshTxRequest) XXX_Size() int {
	return xxx_messageInfo_GroshTxRequest.Size(m)
}
func (m *GroshTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroshTxRequest proto.InternalMessageInfo

func (m *GroshTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *GroshTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *GroshTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *GroshTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

//*
// Request: Transaction payload data.
// @next GroshTxRequest
type GroshTxAck struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshTxAck) Reset()         { *m = GroshTxAck{} }
func (m *GroshTxAck) String() string { return proto.CompactTextString(m) }
func (*GroshTxAck) ProtoMessage()    {}
func (*GroshTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{6}
}

func (m *GroshTxAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshTxAck.Unmarshal(m, b)
}
func (m *GroshTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshTxAck.Marshal(b, m, deterministic)
}
func (m *GroshTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshTxAck.Merge(m, src)
}
func (m *GroshTxAck) XXX_Size() int {
	return xxx_messageInfo_GroshTxAck.Size(m)
}
func (m *GroshTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_GroshTxAck proto.InternalMessageInfo

func (m *GroshTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

//*
// Request: Ask device to sign message
// @start
// @next GroshMessageSignature
// @next Failure
type GroshSignMessage struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshSignMessage) Reset()         { *m = GroshSignMessage{} }
func (m *GroshSignMessage) String() string { return proto.CompactTextString(m) }
func (*GroshSignMessage) ProtoMessage()    {}
func (*GroshSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{7}
}

func (m *GroshSignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshSignMessage.Unmarshal(m, b)
}
func (m *GroshSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshSignMessage.Marshal(b, m, deterministic)
}
func (m *GroshSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshSignMessage.Merge(m, src)
}
func (m *GroshSignMessage) XXX_Size() int {
	return xxx_messageInfo_GroshSignMessage.Size(m)
}
func (m *GroshSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GroshSignMessage proto.InternalMessageInfo

func (m *GroshSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *GroshSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

//*
// Response: Signed message
// @end
type GroshMessageSignature struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	AddressHex           *string  `protobuf:"bytes,3,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshMessageSignature) Reset()         { *m = GroshMessageSignature{} }
func (m *GroshMessageSignature) String() string { return proto.CompactTextString(m) }
func (*GroshMessageSignature) ProtoMessage()    {}
func (*GroshMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{8}
}

func (m *GroshMessageSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshMessageSignature.Unmarshal(m, b)
}
func (m *GroshMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshMessageSignature.Marshal(b, m, deterministic)
}
func (m *GroshMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshMessageSignature.Merge(m, src)
}
func (m *GroshMessageSignature) XXX_Size() int {
	return xxx_messageInfo_GroshMessageSignature.Size(m)
}
func (m *GroshMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_GroshMessageSignature proto.InternalMessageInfo

func (m *GroshMessageSignature) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GroshMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GroshMessageSignature) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type GroshVerifyMessage struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	AddressHex           *string  `protobuf:"bytes,4,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroshVerifyMessage) Reset()         { *m = GroshVerifyMessage{} }
func (m *GroshVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*GroshVerifyMessage) ProtoMessage()    {}
func (*GroshVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{9}
}

func (m *GroshVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroshVerifyMessage.Unmarshal(m, b)
}
func (m *GroshVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroshVerifyMessage.Marshal(b, m, deterministic)
}
func (m *GroshVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroshVerifyMessage.Merge(m, src)
}
func (m *GroshVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_GroshVerifyMessage.Size(m)
}
func (m *GroshVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GroshVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GroshVerifyMessage proto.InternalMessageInfo

func (m *GroshVerifyMessage) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *GroshVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GroshVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GroshVerifyMessage) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

func init() {
	proto.RegisterType((*GroshGetPublicKey)(nil), "hw.trezor.messages.grosh.GroshGetPublicKey")
	proto.RegisterType((*GroshPublicKey)(nil), "hw.trezor.messages.grosh.GroshPublicKey")
	proto.RegisterType((*GroshGetAddress)(nil), "hw.trezor.messages.grosh.GroshGetAddress")
	proto.RegisterType((*GroshAddress)(nil), "hw.trezor.messages.grosh.GroshAddress")
	proto.RegisterType((*GroshSignTx)(nil), "hw.trezor.messages.grosh.GroshSignTx")
	proto.RegisterType((*GroshTxRequest)(nil), "hw.trezor.messages.grosh.GroshTxRequest")
	proto.RegisterType((*GroshTxAck)(nil), "hw.trezor.messages.grosh.GroshTxAck")
	proto.RegisterType((*GroshSignMessage)(nil), "hw.trezor.messages.grosh.GroshSignMessage")
	proto.RegisterType((*GroshMessageSignature)(nil), "hw.trezor.messages.grosh.GroshMessageSignature")
	proto.RegisterType((*GroshVerifyMessage)(nil), "hw.trezor.messages.grosh.GroshVerifyMessage")
}

func init() { proto.RegisterFile("messages-grosh.proto", fileDescriptor_cb33f46ba915f15c) }

var fileDescriptor_cb33f46ba915f15c = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x9b, 0xb4, 0x49, 0x26, 0x0d, 0x1f, 0xa6, 0x55, 0x17, 0x0a, 0x34, 0x18, 0x21, 0xe5,
	0x00, 0x3e, 0x70, 0x43, 0xe2, 0xd2, 0x52, 0x44, 0x2b, 0x4a, 0x55, 0xdc, 0xa8, 0x57, 0x6b, 0x63,
	0x6f, 0xe3, 0x55, 0x9d, 0xdd, 0xe0, 0x5d, 0xb7, 0x0e, 0x7f, 0x82, 0x23, 0xff, 0x87, 0x5f, 0x86,
	0xf6, 0x2b, 0x71, 0x52, 0x54, 0x0e, 0xbd, 0x65, 0xde, 0xbc, 0x7d, 0xf3, 0x66, 0xf4, 0x62, 0xd8,
	0x99, 0x10, 0x21, 0xf0, 0x98, 0x88, 0x77, 0x44, 0x66, 0xa4, 0x20, 0xe5, 0x24, 0x9c, 0x16, 0x5c,
	0x72, 0x7f, 0x37, 0xbb, 0x09, 0x65, 0x41, 0x7e, 0xf2, 0x22, 0x74, 0x94, 0xd0, 0x51, 0x9e, 0x6d,
	0xcf, 0x5f, 0x25, 0x7c, 0x32, 0xe1, 0xcc, 0xbc, 0x09, 0x2e, 0x60, 0xeb, 0xb3, 0xa5, 0x7c, 0x21,
	0xf2, 0xac, 0x1c, 0xe5, 0x34, 0xf9, 0x4a, 0x66, 0xfe, 0x2e, 0x74, 0x70, 0x9a, 0x16, 0x44, 0x88,
	0x98, 0x21, 0xaf, 0xdf, 0x18, 0xf4, 0xa2, 0xb6, 0x05, 0x4e, 0xfd, 0x57, 0xb0, 0x29, 0x32, 0x7e,
	0x13, 0xa7, 0x54, 0x4c, 0x73, 0x3c, 0x43, 0x6b, 0x7d, 0x6f, 0xd0, 0x8e, 0xba, 0x0a, 0x3b, 0x34,
	0x50, 0x30, 0x82, 0xc7, 0x4e, 0x77, 0x21, 0xfa, 0x01, 0x9a, 0x8c, 0xa7, 0x04, 0x79, 0x7d, 0x6f,
	0xd0, 0x7d, 0xff, 0x26, 0xfc, 0x87, 0x5f, 0x6b, 0xee, 0xe8, 0xf0, 0x94, 0xa7, 0x64, 0x38, 0x9b,
	0x92, 0x48, 0x3f, 0xf1, 0x7d, 0x68, 0x56, 0xd3, 0x72, 0xa4, 0x47, 0x75, 0x22, 0xfd, 0x3b, 0x18,
	0x82, 0x5f, 0xf3, 0xbe, 0x6f, 0xdc, 0xdd, 0xdb, 0xf9, 0x77, 0x78, 0xe8, 0x54, 0x9d, 0xe4, 0x4b,
	0x00, 0xab, 0x70, 0x40, 0x99, 0x76, 0xbf, 0x19, 0xd5, 0x90, 0x5a, 0xff, 0x88, 0x54, 0xd6, 0x62,
	0x0d, 0x09, 0xfe, 0xac, 0xc1, 0x03, 0xa7, 0x79, 0x4e, 0xc7, 0x6c, 0x58, 0xdd, 0xed, 0x72, 0x0b,
	0xd6, 0x19, 0x67, 0x09, 0xd1, 0x52, 0x9b, 0x91, 0x29, 0xd4, 0x93, 0x31, 0x16, 0xf1, 0xb4, 0xa0,
	0x09, 0x41, 0x0d, 0xdd, 0x69, 0x8f, 0xb1, 0x38, 0x53, 0xb5, 0x6b, 0xe6, 0x74, 0x42, 0x25, 0x6a,
	0xce, 0x9b, 0x27, 0xaa, 0x56, 0x7a, 0x92, 0x2b, 0xeb, 0xeb, 0x46, 0x4f, 0x17, 0x06, 0x55, 0x86,
	0xbb, 0xda, 0xb0, 0x29, 0x14, 0x7a, 0x8d, 0xf3, 0x92, 0xa0, 0x0d, 0xc3, 0xd5, 0x85, 0xff, 0x16,
	0xfc, 0x14, 0x4b, 0x1c, 0x53, 0x46, 0x25, 0xc5, 0x79, 0x9c, 0x64, 0x25, 0xbb, 0x42, 0x2d, 0x4d,
	0x79, 0xa4, 0x3a, 0xc7, 0xa6, 0xf1, 0x49, 0xe1, 0xfe, 0x1e, 0x74, 0x35, 0x3b, 0x27, 0x6c, 0x2c,
	0x33, 0xd4, 0xee, 0x7b, 0x83, 0x5e, 0x04, 0x0a, 0x3a, 0xd1, 0x88, 0xff, 0x14, 0xda, 0x49, 0x86,
	0x29, 0x8b, 0x69, 0x8a, 0x3a, 0xba, 0xdb, 0xd2, 0xf5, 0x71, 0xea, 0xef, 0x40, 0x4b, 0x56, 0xb1,
	0x9c, 0x4d, 0x09, 0x02, 0xdd, 0xd9, 0x90, 0x95, 0xca, 0x41, 0xf0, 0xdb, 0x5b, 0x44, 0x6a, 0x58,
	0x45, 0xe4, 0x47, 0x49, 0x84, 0x5c, 0x1d, 0xe5, 0xdd, 0x1a, 0xb5, 0x07, 0x5d, 0x41, 0xc7, 0x0c,
	0xcb, 0xb2, 0x20, 0xf1, 0xb5, 0xbe, 0x68, 0x2f, 0x82, 0x39, 0x74, 0xb1, 0x4c, 0x28, 0xec, 0x61,
	0x17, 0x84, 0x68, 0x99, 0x20, 0xec, 0x71, 0x17, 0x84, 0xf3, 0x20, 0x84, 0xde, 0xc2, 0xd8, 0x7e,
	0x72, 0xe5, 0xbf, 0x00, 0xed, 0xc0, 0x5e, 0xc9, 0xe4, 0xa5, 0xa3, 0x10, 0x7d, 0x9e, 0xe0, 0x04,
	0x9e, 0xd4, 0xd3, 0xf0, 0xcd, 0x64, 0xff, 0xee, 0x48, 0x20, 0x68, 0xd9, 0xff, 0x88, 0x0d, 0x85,
	0x2b, 0x83, 0x0a, 0x90, 0x53, 0xb3, 0x4a, 0xe7, 0xce, 0xda, 0x7f, 0x83, 0xfb, 0x1c, 0x3a, 0xf3,
	0x3d, 0xac, 0xee, 0x02, 0x58, 0x89, 0x75, 0xe3, 0x56, 0xac, 0x7f, 0x79, 0xb0, 0xed, 0x46, 0x5f,
	0x90, 0x82, 0x5e, 0xce, 0xdc, 0x2a, 0xf7, 0x9b, 0x5b, 0xdb, 0xb5, 0xb1, 0xb4, 0xeb, 0x8a, 0xa3,
	0xe6, 0xaa, 0xa3, 0x83, 0x8f, 0xf0, 0x3a, 0xe1, 0x93, 0x50, 0x60, 0xc9, 0x45, 0x46, 0x73, 0x3c,
	0x12, 0xee, 0x03, 0x93, 0xd3, 0x91, 0xf9, 0xe2, 0x8d, 0xca, 0xcb, 0x83, 0xed, 0xa1, 0x06, 0xad,
	0x5b, 0xb7, 0xc2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xce, 0x81, 0xc8, 0x59, 0x05, 0x00,
	0x00,
}
